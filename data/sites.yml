- name: Payote
  url: https://payote.co
  technology:
    - Ruby on Rails
    - HTML5
    - CSS
    - Sass
    - Javascript
    - Stripe
  image: payote.jpg
  paragraphs:
    - content: Juicer started as a sideproject in 2014 but very quickly became a fulltime gig. Our customer base exploded over the next 4 years and we had to deal with a lot of customer service issues.
    - content: One of the most prevalent and annoying issues was dealing with customer invoices. Firstly, many of our customers were in the EU, and they needed custom invoices to be able to expense their costs to their business. Specifically they needed to have their companies VAT number on their invoice.
    - content: At Juicer we just used the built in Stripe receipts. This would automatically send our customers a simple receipt whenever their account got charged (usually monthly). The problem was, Stripe does not allow you to customize these receipts at all. So for all of our EU customers we would have to manually create an invoice for them every month that contained their business information. This was no problem at first, but quickly grew to the point that we were manually creating 10 or more invoices every day. While each one wasn't hard, they added up, not to mention all the calendar reminder logic we had to set up to make sure everyone got their invoice.
    - content: So I built a basic version of payote, that simply allowed us to set up custom invoices on our Stripe customers, and would automatically email it to them when their payment went through.
    - content: The next problem with Stripe invoices was that users couldn't view their own invoices. If they lost one of their Stripe receipts there was no easy way for them to view their past invoices without contacting us, and having us re-email it to them. So the second phase of Payote was born; an embeddable invoice viewer.
    - content: This allowed customers to view all of their past invoices, change the billing email, and customize the data-field. We no longer had to deal with customer invoice issues, they could handle everything on their own, saving us and them time.
- name: Minotaur
  url: https://minotaur.fm
  technology:
    - Ruby on Rails
    - HTML5
    - CSS
    - Sass
    - Javascript
    - Marionette
    - React
  image: minotaur.jpg
  paragraphs:
    - content: At the end of 2015 Rdio shut down. For those of you who don't know, Rdio was a online streaming service, a la Spotify or Apple Music. I was super bummed about it. Rdio was beautiful, easy to use and had the best recommendation features of all the streaming music services I had tried.
    - content: When it shut down I went on a bit of a rampage, trying all the other music streaming platforms. Spotify, Apple Music, Google Play, even Tidal. None of them worked in the way I wanted them too. They were all overly complicated, confusing, ugly, or in some cases, appalingly bad.
    - content: It wasn't until several months later, of dealing with super unsatisfying music playback, that I had the realization that I could create my own service. YouTube has basically all the music I ever listen to on it, the one downside is that it's not exactly built to be a music player. But combined with data from Spotify, I could mix those two together and create my own streaming service without having to deal with all the rights management that comes with licencing music. Minotaur was born.
    - content: I worked on Minotaur fiendishly for about a month, approaching an MVP and really happy with the direction it was taking (taking cues from the simplicity of Rdio). When I was around 90% done I came to the realization that there was no way for me to play music offline, or in an app form; since all the music comes from YouTube, there was no way to download those tracks to your phone, nor is there a way to play YouTube videos in the background on your phone. Between that and Juicer getting busier, I gave up. The project sat at 90% complete for 2 years.
    - content: Then in early 2018 I revisited it. I still wasn't satisfied with any of the streaming music services out there (though I had become begrudgingly accustomed to Spotify) and I found myself often thinking about Minotaur. I decided that I wouldn't worry too much about the mobile aspects of Minotaur, 99% of the time I was listening to music it was while I was on my laptop with an internet connection anyways. I gritted my teeth and decided to get Minotaur to an MVP level at least.
    - content: There's still a lot of work to be done to get it to the level of Rdio, but for an MVP it still works shockingly well! I'm using it as my main day to day music player.
- name: Juicer
  url: https://www.juicer.io
  technology:
    - Ruby on Rails
    - HTML5
    - CSS
    - Sass
    - Javascript
    - Backbone
    - Stripe
    - Social Media
  image: juicer-1.jpg
  paragraphs:
    - content: Juicer is a personal project of mine. It came about not because I am passionate about social media feeds (or social media marketing in general) but rather because I saw a space in the market for it, and I was going to have to basically build it anyways.
    - content: Over the course of two years I had three separate clients ask me to put a "social media feed" on to their sites. For those who don't know what that is, it's basically all of their posts from their various business-related social media posts in a single location. Doing this manually would obviously be a huge pain in the ass (you'd have to update the website every time you tweet.
    - content: When my first client asked me to do this, I immediately googled <strong><em>Social Media Feed</em></strong>.
    - content: I found a service called <strong>Tint</strong>. Tint was great, it did exactly what I wanted it to do, you'd enter in your social media account names, copy and paste some code on to your site and <em>voila</em> you had a social media feed on your site. Best of all Tint cost $10 a month.
    - content: Tint did all the heavy lifting for you, it connected to the social media sites (which can be a surprising pain in the ass, and each one is different), and automatically pulled in the new posts for you, so once you embedded it you didn't have to do anything after that.
    - content: I happily used Tint for several clients sites until I was building the site for <a href='http://www.descendants.tv'>Descendants</a> and they asked me to add a social media feed. I went to go sign them up to Tint when I discovered that Tint had raised their prices from $10 a month to $250 a month (since then they have raised their prices again to $500 a month).
    - content: <img src='/images/juicer-2.jpg' class='u-pull-left' alt='Juicer Menu' /> Descendants obviously didn't want to pay $250 a month but they still wanted a social media feed on their site. They asked if I would build a custom one for them. I said I would just build a tint-like service and not charge them for it (on the condition they sign up for the service). I called it <a href='http://www.juicer.io'>Juicer</a>.
    - content: It works almost exactly the same way Tint does, you enter your social media account names and copy and paste some code on to your site and Juicer does the rest.
    - content: But if you ask me, it's better than Tint.
    - content: In addition to automatically syncing your social media accounts with your embedded feed, here's why I think Juicer is better than Tint (and all other competitors, for that matter)
      clear: true
    - content: <ul>
                 <li>Cheaper! (there's even a free plan)</li>
                 <li>More Social Media Accounts</li>
                 <li>Prettier! (Juicer is probably the most beautiful thing I've ever designed.)</li>
                 <li>Moderation, Filtering, Analytics</li>
               </ul>
    - content: <img src='/images/juicer-3.jpg' class='u-pull-right' alt='Juicer Feed' /> Juicer is also probably one of the best looking sites I've ever designed. It's built in Ruby on Rails, responsive and all that. I manually pull in the posts from 10 different social media sites using libraries I buily myself. I handle payment processing with Stripe. I also spent a long time on SEO.
    - content: Tint is crazy expensive for what they offer, and I don't think that's okay. There are tons of people out there who would like to have a social media feed on their site but definitely cannot afford $500 a month (hell, you can get a decent apartment in the midwest for that much). Juicer is for them.

- name: Summerland
  url: http://outoftheboxcollective.com/
  technology:
    - Ruby on Rails
    - HTML5
    - CSS
    - Sass
    - Javascript
    - Backbone
    - Stripe
    - Heroku
  image: summerland-1.jpg
  paragraphs:
    - content: Summerland is a subscription based food delivery service. Essentially you sign up and every week you get a box of vegetables and fruit delivered straight to your door. It's kind of like a <a href='http://en.wikipedia.org/wiki/Community-supported_agriculture'>CSA</a> box, but you can personalize it, and you don't have to go pick it up yourself.
    - content: Summerland was an interesting project for many reasons. From the consumer facing side, it's your fairly basic e-commerce website. Add some products to your account, and pay!
    - content: There's some twists on that, from a programming perspective. First of all, customers don't just sign up for a one time delivery, they get a box every week (or two weeks, or monthly, or just once!) The logic involved to make sure that everyone get's their delivery when they are supposed to is much more complex than your average e-commerce site.
    - content: Secondly, every box is different. It's a farm to frontdoor style solution, that means whatever the farms are currently offering as a crop is what comes in your box. So of course there has to be a much more complex inventory system on the backend to handle the weekly variances in product.
    - content: Thirdly, Summerland is local to Los Angeles, and they handle deliveries in house. So the backend also contains a driver routing application that allows Summerland's owners to get the most efficient route for the drivers each day. No two days deliveries are ever the same, and a variable number of drivers are working on a given day, so as you might imagine this was also very difficult to program but it resulted in saving the company a whole lot of time and effort.
    - content: Overall a huge amount of effort went in to building a robust and helpful admin section for Summerland. I couldn't have done it without my friend and UI/UX expert <a href='http://www.yeedor.com'>Doris Yee</a>.

- name: GOOD
  url: http://www.good.is
  technology:
    - Ruby on Rails
    - HTML5
    - CSS
    - Sass
    - Javascript
    - Backbone
    - Go
  image: good.jpg
  paragraphs:
    - content: I worked at GOOD for two years as a Software Engineer.
    - content: During my tenure we transformed the site from an online magazine into a "Social Network for Social Good". It has since reverted back into an online magazine, for the most part.
    - content: I left GOOD in December 2013 to travel around Asia for 5 months. You can read all about my travels on my <a href='/blog'>Blog</a>.
    - content: We had an amazing product team at GOOD. It's where I learned how to really scale a Rails site for high traffic. I learned to love Backbone.js. I learned that code doesn't have to just be functional, it can be beautiful as well. I learned that it's possible to be friend-friends with your co-workers, not just work-friends.
    - content: I also met my girlfriend <a href='http://www.mushaboom.net'>Allison</a> there, so that's cool too.

- name: Coven
  url: http://www.coven.link
  technology:
    - Ruby on Rails
    - Middleman
    - HTML5
    - CSS
    - Sass
    - Javascript
    - Backbone
  image: coven.jpg
  paragraphs:
    - content: Coven is a simple web app and a Google Chrome Extension that turns your new tab screen into a list of all that days programming related news.
    - content: I came across an extension called <a href='http://usepanda.com/app/'>Panda</a> that was for designers, it had design related news and inspiration.
    - content: I loved the idea of Panda but I wanted to change a few things. First, I wanted the news to be targeted towards developers, not designers. Secondly, I wanted to be able to see all the news from the various sources in one place (with Panda you can only show one source at a single time). Thirdly I wanted to do away with the inspiration section. Us developers don't need inspiration.
    - content: So I built Coven over the course of a week or so. It was my first Chrome Extension, which was interesting. I also built it in two parts, a Rails backed API Service that polls the news sources and pulls in new articles and a front-end built using Middleman, a static site generator.
    - content: I've also opened sourced both parts the <a href='https://www.github.com/goddamnyouryan/coven-api'>API</a> and the <a href='https://www.github.com/goddamnyouryan/coven'>Front End</a>.
    - content: It's certainly not the prettiest thing I've ever built but it gets the job done. I use the Chrome Extension every day.

- name: Tomorrow
  url: http://tomorrow.herokuapp.com
  technology:
    - Ruby on Rails
    - HTML5
    - CSS
    - Sass
    - Javascript
    - Backbone
  image: tomorrow.jpg
  paragraphs:
    - content: Tomorrow Magazine was put together by a bunch of my former co-workers at <a href='http://www.good.is'>GOOD</a> as a one off magazine funded through kickstarter.
    - content: Together with my designer friend <a href='http://www.reneesolorzano.com'>Renee Solorzano</a> we designed and built the site in two weeks.
    - content: Compared to a lot of my other work it's pretty straightforwards from a programming perspective, it's basically an online magazine. It's mostly impressive because a) We did the whole thing in two weeks and b) It's fucking gorgeous. Of course, I had little to do with that, it's almost entirely due to Renee that it's so beautiful.

- name: Sons and Daughters
  url: http://www.sonsanddaughters.ca
  technology:
    - PHP
    - HTML5
    - CSS
    - Javascript
  image: sons-and-daughters.jpg
  paragraphs:
    - content: Over the years I have built almost countless sites for Production Companies (don't ask me why, it just happened). Sons and Daughters was the first, and my personal favorite.
    - content: When I originally quoted them I was planning on building the site in Rails. Right as I was just about to start building their IT guy got in contact with me to let me know that they needed the site done in PHP so they could host it on their servers. This was back in 2008 or so when I didn't know any better, so I agreed, despite not being especially good at PHP (I never bothered to get really good because I didn't like it and rarely used it outside of wordpress).
    - content: I ended up building them an entire CMS from scratch in PHP so they could add videos and directors without my input. Unfortunately the IT guy insisted on hosting everything, including the video files on their servers, so it's not as it would have been if I had used Amazon CloudFront as a CDN.
    - content: So technology-wise it's nothing exciting and not playing to my strengths, but I'm still incredibly happy with how the design and everything else turned out.

- name: goddamnyouryan
  url: http://www.goddamnyouryan.com
  technology:
    - Middleman
    - HTML5
    - CSS
    - Sass
    - Javascript
    - Backbone
  image: goddamnyouryan.jpg
  paragraphs:
    - content: It's a goddamnyouryan.com tradition to put a reference to my site on the site itself. I am so meta.
    - content: This is the 3rd version of goddamnyouryan.com. You can view <a href='http://v1.goddamnyouryan.com'>V1</a> and <a href='http://v2.goddamnyouryan.com'>V2</a> if you'd like to see the progression. Strangely enough it's gotten more and more minimal over time, but maybe more informative each time too?
    - content: It's built using Middleman, a static site generator that I absolutely love. I get to work in Ruby but in the end I build a static site, so it's nice and fast.
